// Code generated by "enumer -type=fetchDataType -linecomment -json=true -sql=true"; DO NOT EDIT.

//
package storage

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
)

const _fetchDataTypeName = "pricerateauth_datagoldbtcusd"

var _fetchDataTypeIndex = [...]uint8{0, 5, 9, 18, 22, 25, 28}

func (i fetchDataType) String() string {
	if i < 0 || i >= fetchDataType(len(_fetchDataTypeIndex)-1) {
		return fmt.Sprintf("fetchDataType(%d)", i)
	}
	return _fetchDataTypeName[_fetchDataTypeIndex[i]:_fetchDataTypeIndex[i+1]]
}

var _fetchDataTypeValues = []fetchDataType{0, 1, 2, 3, 4, 5}

var _fetchDataTypeNameToValueMap = map[string]fetchDataType{
	_fetchDataTypeName[0:5]:   0,
	_fetchDataTypeName[5:9]:   1,
	_fetchDataTypeName[9:18]:  2,
	_fetchDataTypeName[18:22]: 3,
	_fetchDataTypeName[22:25]: 4,
	_fetchDataTypeName[25:28]: 5,
}

// fetchDataTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func fetchDataTypeString(s string) (fetchDataType, error) {
	if val, ok := _fetchDataTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to fetchDataType values", s)
}

// fetchDataTypeValues returns all values of the enum
func fetchDataTypeValues() []fetchDataType {
	return _fetchDataTypeValues
}

// IsAfetchDataType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i fetchDataType) IsAfetchDataType() bool {
	for _, v := range _fetchDataTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for fetchDataType
func (i fetchDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for fetchDataType
func (i *fetchDataType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("fetchDataType should be a string, got %s", data)
	}

	var err error
	*i, err = fetchDataTypeString(s)
	return err
}

func (i fetchDataType) Value() (driver.Value, error) {
	return i.String(), nil
}

func (i *fetchDataType) Scan(value interface{}) error {
	if value == nil {
		return nil
	}

	str, ok := value.(string)
	if !ok {
		bytes, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("value is not a byte slice")
		}

		str = string(bytes[:])
	}

	val, err := fetchDataTypeString(str)
	if err != nil {
		return err
	}

	*i = val
	return nil
}
